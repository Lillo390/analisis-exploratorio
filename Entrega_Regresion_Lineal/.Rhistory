knit_hooks$set(inline = function(x) {
if(is.numeric(x)) {
round(x, getOption('digits'))
} else {
paste(as.character(x), collapse = ', ')
}
})
#knit_hooks$set(plot = knitr:::hook_plot_html)
# Especificamos las librerías necesarias en esta lista
packages = c("kableExtra","tidyverse","knitr", "ggplot2", "car")
#use this function to check if each package is on the local machine
#if a package is installed, it will be loaded
#if any are not, the missing package(s) will be installed and loaded
package.check <- lapply(packages, FUN = function(x) {
if (!require(x, character.only = TRUE)) {
install.packages(x, dependencies = TRUE,repos='http://cran.rediris.es')
library(x, character.only = TRUE)
}
})
#verify they are loaded
search()
knitr::kable(pressure,caption="Valores de las variables mostrados en la figura \\ref{fig::presFig}. \\label{EventosFallo}")
knitr::kable(pressure,caption="Valores de las variables mostrados en la figura \\ref{fig::presFig}. \\label{EventosFallo}")%>%kable_styling()
cars <- read.csv2("./data/cars.csv")
ggplot(cars, mapping=aes(x=MPG.city, y=Price))+geom_point()+
geom_smooth(method = "lm", se=TRUE, level=0.9)+
ggtitle("Diagrama de dispersión, recta=Price~MPG.city", subtitle="Confianza al 90%")
cor(cars$MPG.city, cars$Price)
ggplot(cars, mapping=aes(x=MPG.city, y=Price))+geom_point()+
geom_smooth(method = "lm", se=TRUE, level=0.9, formula = y ~ poly(x, 2))+
ggtitle("Diagrama de dispersión, curva=Price~MPG.city+(MPG.city)^2",
subtitle="Confianza al 90%")
ggplot(cars, mapping=aes(x=sqrt(log(MPG.city)), y=log(Price)))+geom_point()+
geom_smooth(method = "lm", se=TRUE, level=0.9, formula=y~x)+
ggtitle("Diagrama de dispersión, recta=log(Price)~sqrt(log(MPG.city))",
subtitle="Confianza al 90%")
cor((log(cars$MPG.city))^(1/2), log(cars$Price))
cor((log(cars$MPG.city))^(1/32), (log(cars$Price))^(1/16))
cor((log(cars$MPG.city))^(1/128), (log(cars$Price))^(1/64))
fit1<-lm(log(Price)~poly(log(MPG.city),2), data=cars)
fit1.s<-summary(fit1)
fit1.s
par(mfrow=c(1,2))
plot(exp(fit1$fitted.values)~exp(log(cars$MPG.city)), ylim=c(0,65),
main="Valores ajustados", ylab="Precio", xlab="MPG.city")
plot(cars$Price~cars$MPG.city, ylim=c(0,65),
main="Datos reales",ylab="Precio", xlab="MPG.city")
par(mfrow=c(1,1))
library(leaps)
cars$Type<-as.factor(cars$Type)
cars$Origin<-as.factor(cars$Origin)
fit10<- regsubsets(Price~. , data=cars, nvmax=9)
fit10.s<-summary(fit10)
# Buscamos el mayor R^2
max_r2<-fit10.s$which[which.max(fit10.s$rsq),]
names(max_r2[which(max_r2==TRUE)])
# Buscamos el menor BIC
min_bic<-fit10.s$which[which.min(fit10.s$bic),]
names(min_bic[which(min_bic==TRUE)])
# Buscamos el menor AIC
min_aic<-fit10.s$which[which.min(fit10.s$cp),]
names(min_aic[which(min_aic==TRUE)])
model0 <- lm(Price ~ . , data=cars)
aj_step0 <- step(model0)
cars$Passengers<-as.factor(cars$Passengers)
model1 <- lm(Price ~ . , data=cars)
aj_step1 <- step(model1)
aj_step1.s<-summary(aj_step1)
aj_step1.s
cars%>%group_by(Type)%>%summarize(mean())
cars%>%group_by(Type)%>%summarize(mean(Price))
cars_prueba<-cars
cars_prueba$Type<-factor(cars_prueba, levels=c("Compact", "Large", "Midsize", "Small", "Sporty", "Van"), labels=c("Compact", "Large", "Midsize", "Small", "Van", "Van"))
cars_prueba<-cars
cars_prueba$Type<-factor(cars_prueba, levels=c("Compact", "Large", "Midsize", "Small", "Sporty", "Van"), labels=c("Compact", "Large", "Midsize", "Small", "Van", "Van"))
cars_prueba$Type<-factor(cars_prueba$Type, levels=c("Compact", "Large", "Midsize", "Small", "Sporty", "Van"), labels=c("Compact", "Large", "Midsize", "Small", "Van", "Van"))
cars_prueba
str(cars_prueba)
aj_step1.s
# Vamos a juntar los grupos "Sporty" y "Van"
cars_prueba<-cars
cars_prueba$Type<-factor(cars_prueba$Type, levels=c("Compact", "Large", "Midsize", "Small", "Sporty", "Van"), labels=c("Compact", "Large", "Midsize", "Small", "Van", "Van"))
model2 <- lm(Price ~ . , data=cars_prueba)
aj_step2 <- step(model2)
aj_step2.s<-summary(aj_step2)
aj_step2.s<-summary(aj_step2)
aj_step2.s
cars%>%group_by(Type)%>%summarize(mean(Price))
# Vamos a juntar los grupos "Sporty", "Van" y "Compact"
cars_prueba2<-cars
cars_prueba2$Type<-factor(cars_prueba2$Type, levels=c("Compact", "Large", "Midsize", "Small", "Sporty", "Van"), labels=c("Van", "Large", "Midsize", "Small", "Van", "Van"))
model3 <- lm(Price ~ . , data=cars_prueba2)
aj_step3 <- step(model3)
aj_step3.s<-summary(aj_step3)
aj_step3.s
aj_step3.s
# Vamos a juntar los grupos "Sporty", "Van" y "Compact" por un lado
# y "Midsize" con "Large" por otro
cars_prueba3<-cars
cars_prueba3$Type<-factor(cars_prueba3$Type, levels=c("Compact", "Large", "Midsize", "Small", "Sporty", "Van"), labels=c("Van", "Large", "Large", "Small", "Van", "Van"))
model4 <- lm(Price ~ . , data=cars_prueba3)
aj_step4 <- step(model4)
aj_step4.s<-summary(aj_step4)
aj_step4.s
aj_step4.s
aj_step4 <- step(model4)
aj_step4.s
aj_step4.s$cov.unscaled
aj_step4.s
# Vamos a juntar los grupos "Sporty", "Van", "Compact" y "Small" por un
# lado y "Midsize" con "Large" por otro.
cars_prueba4<-cars
cars_prueba4$Type<-factor(cars_prueba4$Type, levels=c("Compact", "Large", "Midsize", "Small", "Sporty", "Van"), labels=c("Van", "Large", "Large", "Van", "Van", "Van"))
model5 <- lm(Price ~ . , data=cars_prueba4)
aj_step5 <- step(model5)
aj_step5.s<-summary(aj_step5)
aj_step5.s
aj_step5.s
aj_step5 <- step(model5)
cars%>%group_by(type)%>%summarize(mean(price))
cars%>%group_by(Type)%>%summarize(mean(Price))
table(cars%>%group_by(Type)%>%summarize(mean(Price)))
aj_step1 <- step(model1, trace=F)
aj_step1.s<-summary(aj_step1)
aj_step1.s
aj_step1
aic(aj_step1)
AIC(aj_step1)
aj_step1 <- step(model1, trace=T)
aj_step5.s
library(car)
influencePlot(aj_step5)
influencePlot(aj_step5)
influence.measures(aj_step5)
plot(aj_step5)
plot(aj_step5, which=1)
plot(aj_step5, which=2)
plot(aj_step5, which=3)
plot(aj_step5, which=4)
par(mfrow=c(2,3))
for (i in 1:5){
plot(aj_step5, which=i)
}
par(mfrow=c(1,1))
sqrt(3)
cars_prueba4[59,]
cars%>%group_by(Type)%>%summarize(mean(Price))
shapiro.test(aj_step5.s$residuals)
cars_prueba4%>%filter(Price<61.9)
cars_prueba5<-cars_prueba4%>%filter(Price<61.9)
library(dplyr)
cars_prueba5<-cars_prueba4%>%filter(Price<61.9)
aj_step6<-lm(formula = Price ~ Type + Horsepower + RPM + Wheelbase + Width + Origin, data = cars_prueba5)
aj_step6.s<-summary(aj_step6)
aj_step6.s
par(mfrow=c(2,3))
for (i in 1:5){
plot(aj_step6, which=i)
}
par(mfrow=c(1,1))
shapiro.test(aj_step6.s$residuals)
library(dplyr)
cars_prueba5<-cars_prueba4%>%filter(Price<61.9)
cars_prueba5$Price<-log10(cars_prueba5$Price)
aj_step6<-lm(formula = Price ~ Type + Horsepower + RPM + Wheelbase + Width + Origin, data = cars_prueba5)
aj_step6.s<-summary(aj_step6)
aj_step6.s
par(mfrow=c(2,3))
for (i in 1:5){
plot(aj_step6, which=i)
}
par(mfrow=c(1,1))
shapiro.test(aj_step6.s$residuals)
cars_prueba5<-cars_prueba4%>%filter(Price<61.9)
aj_step6 <- lm(formula = Price ~ Type + Horsepower + RPM + Wheelbase + Width + Origin, data = cars_prueba5)
boxcox(aj_step6, lambda = seq(-2,2, length = 10))
library(MASS)
cars_prueba5<-cars_prueba4%>%filter(Price<61.9)
aj_step6 <- lm(formula = Price ~ Type + Horsepower + RPM + Wheelbase + Width + Origin, data = cars_prueba5)
boxcox(aj_step6, lambda = seq(-2,2, length = 10))
boxcox(aj_step6, lambda = seq(-1,1, length = 10))
library(dplyr)
library(MASS)
cars_prueba5<-cars_prueba4%>%filter(Price<61.9)
aj_step6 <- lm(formula = Price ~ Type + Horsepower + RPM + Wheelbase + Width + Origin, data = cars_prueba5)
boxcox(aj_step6, lambda = seq(-1,1, length = 10))
# Como el óptimo lo alcanzamos en lambda=0, realizamos una transforma-
# ción logarítmica de la variable respuesta
cars_prueba5$Price<-log10(cars_prueba5$Price)
aj_step6<-lm(formula = Price ~ Type + Horsepower + RPM + Wheelbase + Width + Origin, data = cars_prueba5)
aj_step6.s<-summary(aj_step6)
aj_step6.s
par(mfrow=c(2,3))
for (i in 1:5){
plot(aj_step6, which=i)
}
par(mfrow=c(1,1))
shapiro.test(aj_step6.s$residuals)
names(aj_step6)
names(aj_step6$coefficients)
median(cars_prueba5$Type)
names(aj_step6$coefficients)
median(cars_prueba5$Horsepower)
median(cars_prueba5$RPM)
median(cars_prueba5$Wheelbase)
median(cars_prueba5$Width)
median(cars_prueba5$OriginUSA)
mode(cars_prueba5$Type)
library(modeest)
install.packages("modeest")
library(modeest)
library(modeest)
names(aj_step6$coefficients)
mlv(cars_prueba5$Type, method="mvf")
median(cars_prueba5$Horsepower)
median(cars_prueba5$RPM)
median(cars_prueba5$Wheelbase)
median(cars_prueba5$Width)
mlv(cars_prueba5$OriginUSA, method="mvf")
cars_prueba5$OriginUSA
names(aj_step6$coefficients)
cars_prueba5$OriginUSA
# CONFIGURACIÓN GENERAL
library(knitr)
options(width = 100)
# Opciones generales chunks
#include = FALSE evita que el código y los resultados aparezcan en el archivo terminado. R Markdown aún ejecuta el código en el fragmento y los resultados pueden ser utilizados por otros fragmentos.
#echo = FALSE evita que el código, pero no los resultados, aparezcan en el archivo terminado. Esta es una manera útil de incrustar figuras.
#message = FALSE evita que los mensajes generados por el código aparezcan en el archivo finalizado.
#warning = FALSE evita que las advertencias generadas por el código aparezcan en el final.
#fig.cap = "..." agrega un título a los resultados gráficos.
opts_chunk$set(echo=T, message = F, error = F, warning = F, comment = NA, fig.align = 'center', dpi = 100, tidy = F, cache.path = '.cache/', fig.path = './figure/',fig.width=5.5, fig.height=3.5)
#options(xtable.type = 'html')
knit_hooks$set(inline = function(x) {
if(is.numeric(x)) {
round(x, getOption('digits'))
} else {
paste(as.character(x), collapse = ', ')
}
})
#knit_hooks$set(plot = knitr:::hook_plot_html)
# Especificamos las librerías necesarias en esta lista
packages = c("kableExtra","tidyverse","knitr", "ggplot2", "car")
#use this function to check if each package is on the local machine
#if a package is installed, it will be loaded
#if any are not, the missing package(s) will be installed and loaded
package.check <- lapply(packages, FUN = function(x) {
if (!require(x, character.only = TRUE)) {
install.packages(x, dependencies = TRUE,repos='http://cran.rediris.es')
library(x, character.only = TRUE)
}
})
#verify they are loaded
search()
cars <- read.csv2("./data/cars.csv")
ggplot(cars, mapping=aes(x=MPG.city, y=Price))+geom_point()+
geom_smooth(method = "lm", se=TRUE, level=0.9)+
ggtitle("Diagrama de dispersión, recta=Price~MPG.city", subtitle="Confianza al 90%")
cor(cars$MPG.city, cars$Price)
ggplot(cars, mapping=aes(x=MPG.city, y=Price))+geom_point()+
geom_smooth(method = "lm", se=TRUE, level=0.9, formula = y ~ poly(x, 2))+
ggtitle("Diagrama de dispersión, curva=Price~MPG.city+(MPG.city)^2",
subtitle="Confianza al 90%")
ggplot(cars, mapping=aes(x=sqrt(log(MPG.city)), y=log(Price)))+geom_point()+
geom_smooth(method = "lm", se=TRUE, level=0.9, formula=y~x)+
ggtitle("Diagrama de dispersión, recta=log(Price)~sqrt(log(MPG.city))",
subtitle="Confianza al 90%")
cor((log(cars$MPG.city))^(1/2), log(cars$Price))
cor((log(cars$MPG.city))^(1/32), (log(cars$Price))^(1/16))
cor((log(cars$MPG.city))^(1/128), (log(cars$Price))^(1/64))
fit1<-lm(log(Price)~poly(log(MPG.city),2), data=cars)
fit1.s<-summary(fit1)
fit1.s
par(mfrow=c(1,2))
plot(exp(fit1$fitted.values)~exp(log(cars$MPG.city)), ylim=c(0,65),
main="Valores ajustados", ylab="Precio", xlab="MPG.city")
plot(cars$Price~cars$MPG.city, ylim=c(0,65),
main="Datos reales",ylab="Precio", xlab="MPG.city")
par(mfrow=c(1,1))
library(leaps)
cars$Type<-as.factor(cars$Type)
cars$Origin<-as.factor(cars$Origin)
fit10<- regsubsets(Price~. , data=cars, nvmax=9)
fit10.s<-summary(fit10)
# Buscamos el mayor R^2
max_r2<-fit10.s$which[which.max(fit10.s$rsq),]
names(max_r2[which(max_r2==TRUE)])
# Buscamos el menor BIC
min_bic<-fit10.s$which[which.min(fit10.s$bic),]
names(min_bic[which(min_bic==TRUE)])
# Buscamos el menor AIC
min_aic<-fit10.s$which[which.min(fit10.s$cp),]
names(min_aic[which(min_aic==TRUE)])
model0 <- lm(Price ~ . , data=cars)
aj_step0 <- step(model0)
cars$Passengers<-as.factor(cars$Passengers)
model1 <- lm(Price ~ . , data=cars)
aj_step1 <- step(model1)
aj_step1.s<-summary(aj_step1)
cars%>%group_by(Type)%>%summarize(mean(Price))
View(cars)
# CONFIGURACIÓN GENERAL
library(knitr)
options(width = 100)
# Opciones generales chunks
#include = FALSE evita que el código y los resultados aparezcan en el archivo terminado. R Markdown aún ejecuta el código en el fragmento y los resultados pueden ser utilizados por otros fragmentos.
#echo = FALSE evita que el código, pero no los resultados, aparezcan en el archivo terminado. Esta es una manera útil de incrustar figuras.
#message = FALSE evita que los mensajes generados por el código aparezcan en el archivo finalizado.
#warning = FALSE evita que las advertencias generadas por el código aparezcan en el final.
#fig.cap = "..." agrega un título a los resultados gráficos.
opts_chunk$set(echo=T, message = F, error = F, warning = F, comment = NA, fig.align = 'center', dpi = 100, tidy = F, cache.path = '.cache/', fig.path = './figure/',fig.width=5.5, fig.height=3.5)
#options(xtable.type = 'html')
knit_hooks$set(inline = function(x) {
if(is.numeric(x)) {
round(x, getOption('digits'))
} else {
paste(as.character(x), collapse = ', ')
}
})
#knit_hooks$set(plot = knitr:::hook_plot_html)
# Especificamos las librerías necesarias en esta lista
packages = c("kableExtra","tidyverse","knitr", "ggplot2", "car")
#use this function to check if each package is on the local machine
#if a package is installed, it will be loaded
#if any are not, the missing package(s) will be installed and loaded
package.check <- lapply(packages, FUN = function(x) {
if (!require(x, character.only = TRUE)) {
install.packages(x, dependencies = TRUE,repos='http://cran.rediris.es')
library(x, character.only = TRUE)
}
})
#verify they are loaded
search()
cars <- read.csv2("./data/cars.csv")
ggplot(cars, mapping=aes(x=MPG.city, y=Price))+geom_point()+
geom_smooth(method = "lm", se=TRUE, level=0.9)+
ggtitle("Diagrama de dispersión, recta=Price~MPG.city", subtitle="Confianza al 90%")
cor(cars$MPG.city, cars$Price)
ggplot(cars, mapping=aes(x=MPG.city, y=Price))+geom_point()+
geom_smooth(method = "lm", se=TRUE, level=0.9, formula = y ~ poly(x, 2))+
ggtitle("Diagrama de dispersión, curva=Price~MPG.city+(MPG.city)^2",
subtitle="Confianza al 90%")
ggplot(cars, mapping=aes(x=sqrt(log(MPG.city)), y=log(Price)))+geom_point()+
geom_smooth(method = "lm", se=TRUE, level=0.9, formula=y~x)+
ggtitle("Diagrama de dispersión, recta=log(Price)~sqrt(log(MPG.city))",
subtitle="Confianza al 90%")
cor((log(cars$MPG.city))^(1/2), log(cars$Price))
cor((log(cars$MPG.city))^(1/32), (log(cars$Price))^(1/16))
cor((log(cars$MPG.city))^(1/128), (log(cars$Price))^(1/64))
fit1<-lm(log(Price)~poly(log(MPG.city),2), data=cars)
fit1.s<-summary(fit1)
fit1.s
par(mfrow=c(1,2))
plot(exp(fit1$fitted.values)~exp(log(cars$MPG.city)), ylim=c(0,65),
main="Valores ajustados", ylab="Precio", xlab="MPG.city")
plot(cars$Price~cars$MPG.city, ylim=c(0,65),
main="Datos reales",ylab="Precio", xlab="MPG.city")
par(mfrow=c(1,1))
library(leaps)
cars$Type<-as.factor(cars$Type)
cars$Origin<-as.factor(cars$Origin)
fit10<- regsubsets(Price~. , data=cars, nvmax=9)
fit10.s<-summary(fit10)
# Buscamos el mayor R^2
max_r2<-fit10.s$which[which.max(fit10.s$rsq),]
names(max_r2[which(max_r2==TRUE)])
# Buscamos el menor BIC
min_bic<-fit10.s$which[which.min(fit10.s$bic),]
names(min_bic[which(min_bic==TRUE)])
# Buscamos el menor AIC
min_aic<-fit10.s$which[which.min(fit10.s$cp),]
names(min_aic[which(min_aic==TRUE)])
model0 <- lm(Price ~ . , data=cars)
aj_step0 <- step(model0)
cars$Passengers<-as.factor(cars$Passengers)
model1 <- lm(Price ~ . , data=cars)
aj_step1 <- step(model1)
aj_step1.s<-summary(aj_step1)
cars%>%group_by(Type)%>%summarize(mean(Price))
aj_step1.s
# Vamos a juntar los grupos "Sporty" y "Van"
cars_prueba<-cars
cars_prueba$Type<-factor(cars_prueba$Type, levels=c("Compact", "Large", "Midsize", "Small", "Sporty", "Van"), labels=c("Compact", "Large", "Midsize", "Small", "Van", "Van"))
model2 <- lm(Price ~ . , data=cars_prueba)
aj_step2 <- step(model2)
aj_step2.s<-summary(aj_step2)
aj_step2.s
# Vamos a juntar los grupos "Sporty", "Van" y "Compact"
cars_prueba2<-cars
cars_prueba2$Type<-factor(cars_prueba2$Type, levels=c("Compact", "Large", "Midsize", "Small", "Sporty", "Van"), labels=c("Van", "Large", "Midsize", "Small", "Van", "Van"))
model3 <- lm(Price ~ . , data=cars_prueba2)
aj_step3 <- step(model3)
aj_step3.s<-summary(aj_step3)
aj_step3.s
# Vamos a juntar los grupos "Sporty", "Van" y "Compact" por un lado
# y "Midsize" con "Large" por otro
cars_prueba3<-cars
cars_prueba3$Type<-factor(cars_prueba3$Type, levels=c("Compact", "Large", "Midsize", "Small", "Sporty", "Van"), labels=c("Van", "Large", "Large", "Small", "Van", "Van"))
model4 <- lm(Price ~ . , data=cars_prueba3)
aj_step4 <- step(model4)
aj_step4.s<-summary(aj_step4)
aj_step4.s
# Vamos a juntar los grupos "Sporty", "Van", "Compact" y "Small" por un
# lado y "Midsize" con "Large" por otro.
cars_prueba4<-cars
cars_prueba4$Type<-factor(cars_prueba4$Type, levels=c("Compact", "Large", "Midsize", "Small", "Sporty", "Van"), labels=c("Van", "Large", "Large", "Van", "Van", "Van"))
model5 <- lm(Price ~ . , data=cars_prueba4)
aj_step5 <- step(model5)
aj_step5.s<-summary(aj_step5)
aj_step5.s
par(mfrow=c(2,3))
for (i in 1:5){
plot(aj_step5, which=i)
}
par(mfrow=c(1,1))
shapiro.test(aj_step5.s$residuals)
cars_prueba4[59,]
library(dplyr)
library(MASS)
cars_prueba5<-cars_prueba4%>%filter(Price<61.9)
aj_step6 <- lm(formula = Price ~ Type + Horsepower + RPM + Wheelbase + Width + Origin, data = cars_prueba5)
boxcox(aj_step6, lambda = seq(-1,1, length = 10))
# Como el óptimo lo alcanzamos en lambda=0, realizamos una transforma-
# ción logarítmica de la variable respuesta
cars_prueba5$Price<-log10(cars_prueba5$Price)
aj_step6<-lm(formula = Price ~ Type + Horsepower + RPM + Wheelbase + Width + Origin, data = cars_prueba5)
aj_step6.s<-summary(aj_step6)
aj_step6.s
par(mfrow=c(2,3))
for (i in 1:5){
plot(aj_step6, which=i)
}
par(mfrow=c(1,1))
shapiro.test(aj_step6.s$residuals)
library(modeest)
names(aj_step6$coefficients)
mlv(cars_prueba5$Type, method="mvf")
median(cars_prueba5$Horsepower)
median(cars_prueba5$RPM)
median(cars_prueba5$Wheelbase)
median(cars_prueba5$Width)
mlv(cars_prueba5$Origin, method="mvf")
names(aj_step6$coefficients)
mlv(cars_prueba5$Type, method="mvf")
median(cars_prueba5$Horsepower)
median(cars_prueba5$RPM)
median(cars_prueba5$Wheelbase)
median(cars_prueba5$Width)
mlv(cars_prueba5$Origin, method="mvf")
predict(aj_step6, c(0, 140, 5200, 103, 69, 1))
?predicrt
?predict
# CONFIGURACIÓN GENERAL
library(knitr)
options(width = 100)
# Opciones generales chunks
#include = FALSE evita que el código y los resultados aparezcan en el archivo terminado. R Markdown aún ejecuta el código en el fragmento y los resultados pueden ser utilizados por otros fragmentos.
#echo = FALSE evita que el código, pero no los resultados, aparezcan en el archivo terminado. Esta es una manera útil de incrustar figuras.
#message = FALSE evita que los mensajes generados por el código aparezcan en el archivo finalizado.
#warning = FALSE evita que las advertencias generadas por el código aparezcan en el final.
#fig.cap = "..." agrega un título a los resultados gráficos.
opts_chunk$set(echo=T, message = F, error = F, warning = F, comment = NA, fig.align = 'center', dpi = 100, tidy = F, cache.path = '.cache/', fig.path = './figure/',fig.width=5.5, fig.height=3.5)
#options(xtable.type = 'html')
knit_hooks$set(inline = function(x) {
if(is.numeric(x)) {
round(x, getOption('digits'))
} else {
paste(as.character(x), collapse = ', ')
}
})
#knit_hooks$set(plot = knitr:::hook_plot_html)
data<-data.frame("Type"=mlv(cars_prueba5$Type, method="mvf"), "Horsepower"=
median(cars_prueba5$Horsepower), "RPM"=
median(cars_prueba5$RPM), "Wheelbase"=
median(cars_prueba5$Wheelbase), "Width"=
median(cars_prueba5$Width), "Origin"=
mlv(cars_prueba5$Origin, method="mvf"))
library(modeest)
data<-data.frame("Type"=mlv(cars_prueba5$Type, method="mvf"), "Horsepower"=
median(cars_prueba5$Horsepower), "RPM"=
median(cars_prueba5$RPM), "Wheelbase"=
median(cars_prueba5$Wheelbase), "Width"=
median(cars_prueba5$Width), "Origin"=
mlv(cars_prueba5$Origin, method="mvf"))
predict(aj_step6, newdata=data, interval="confidence")
library(dplyr)
library(MASS)
cars_prueba5<-cars_prueba4%>%filter(Price<61.9)
aj_step6 <- lm(formula = Price ~ Type + Horsepower + RPM + Wheelbase + Width + Origin, data = cars_prueba5)
boxcox(aj_step6, lambda = seq(-1,1, length = 10))
# Como el óptimo lo alcanzamos en lambda=0, realizamos una transforma-
# ción logarítmica de la variable respuesta
cars_prueba5$Price<-log(cars_prueba5$Price)
aj_step6<-lm(formula = Price ~ Type + Horsepower + RPM + Wheelbase + Width + Origin, data = cars_prueba5)
aj_step6.s<-summary(aj_step6)
aj_step6.s
par(mfrow=c(2,3))
for (i in 1:5){
plot(aj_step6, which=i)
}
par(mfrow=c(1,1))
shapiro.test(aj_step6.s$residuals)
library(modeest)
names(aj_step6$coefficients)
data<-data.frame("Type"=mlv(cars_prueba5$Type, method="mvf"), "Horsepower"=
median(cars_prueba5$Horsepower), "RPM"=
median(cars_prueba5$RPM), "Wheelbase"=
median(cars_prueba5$Wheelbase), "Width"=
median(cars_prueba5$Width), "Origin"=
mlv(cars_prueba5$Origin, method="mvf"))
predict(aj_step6, newdata=data, interval="confidence")
exp(predict(aj_step6, newdata=data, interval="confidence"))
