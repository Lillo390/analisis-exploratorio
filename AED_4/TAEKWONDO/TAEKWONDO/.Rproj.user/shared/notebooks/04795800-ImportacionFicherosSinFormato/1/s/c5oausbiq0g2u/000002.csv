"0","# Creamos la función lectura para poder hacer un apply."
"0","lectura<-function(fichero){"
"0","require(dplyr)"
"0","require(tidyr)"
"0","# Obtenemos la variable SamplingFreq"
"0","SamplingFreq<-grep(pattern=""SamplingFreq=."",fichero, value=TRUE)"
"0","SamplingFreq<-unlist(strsplit(SamplingFreq, split=""=""))"
"0","SamplingFreq<-as.numeric(SamplingFreq[2])"
"0",""
"0","# Obtenemos la variable ChannelCount"
"0","ChannelCount<-grep(pattern=""ChannelCount=."",fichero, value=TRUE)"
"0","ChannelCount<-unlist(strsplit(ChannelCount, split=""=""))"
"0","ChannelCount<-as.numeric(ChannelCount[2])"
"0",""
"0","# Obtenemos la variable Units"
"0","Units<-grep(pattern=""[UNITS]"",fichero, fixed=TRUE)"
"0","Units<-fichero[Units+1]"
"0",""
"0","# Obtenemos las variables TipoPatada y OrdenComienzo"
"0","TipoPatada_index<-grep(pattern=""[COMMENT]"", fichero, fixed=TRUE)"
"0","OrdenComienzo<-unlist(strsplit(gsub(x=fichero[TipoPatada_index+1], replacement="""", "
"0","pattern=""[^d_i]| [^i_d]""), split=""""))"
"0","OrdenComienzo<-paste0(OrdenComienzo[(length(OrdenComienzo)-2)],"
"0","OrdenComienzo[(length(OrdenComienzo)-1)], OrdenComienzo[(length(OrdenComienzo))])"
"0","TipoPatada<-regexpr(""([0-9]+_[CGL])|([0-9]+[CGL])"",text=fichero[TipoPatada_index+1])"
"0","TipoPatada<-unlist(strsplit(fichero[TipoPatada_index+1], """"))[TipoPatada:attributes(TipoPatada)$match.length]"
"0","TipoPatada<-tail(TipoPatada, 1)"
"0",""
"0","# Contruimos una tabla con los datos igual que la del fichero"
"0","source_names<-grep(pattern=""[SOURCE NAMES]"", fichero, fixed=TRUE)"
"0","side_info<-grep(pattern=""[SIDE INFO]"", fichero, fixed=TRUE)"
"0","units<-grep(pattern=""[UNITS]"", fichero, fixed=TRUE)"
"0",""
"0","source_names<-fichero[(source_names+1):(source_names+ChannelCount)]"
"0","side_info<-fichero[(side_info+1):(side_info+ChannelCount)]"
"0",""
"0","columnas<-paste(side_info,source_names, sep=""_"")"
"0",""
"0","datos_index<-grep(pattern=""[DATA]"", fichero, fixed=TRUE)+1"
"0","N<-length(fichero)"
"0","datos<-matrix(0, nrow=(N-datos_index+1), ncol=length(columnas))"
"0","colnames(datos)<-columnas"
"0",""
"0","for(j in datos_index:N){"
"0","datos[j-datos_index+1,]<-as.numeric(gsub(x=unlist(strsplit(fichero[j], split=""\t"")),"
"0","pattern="","", replacement=""\\.""))"
"0","}"
"0",""
"0","datos<-as.data.frame(datos)"
"0",""
"0","# Transformamos la tabla en un conjunto Tidy"
"0","DataTK<-datos%>%"
"0","  pivot_longer(names_to=""NombreCanal"", values_to=""Data"", cols=everything())%>%"
"0","  separate(col=NombreCanal, into=c(""NombreCanal"", ""Side""), sep=""_"")%>%"
"0","  transmute(""TipoPatada""=TipoPatada,""NombreCanal""=NombreCanal,""Side""=Side,"
"0","            ""OrdenComienzo""=OrdenComienzo, ""Data""=Data)"
"0",""
"0","return(list(""DataTK""=DataTK, ""SamplingFreq""=SamplingFreq, ""Units""=Units, "
"0","""ChannelCount""=ChannelCount))"
"0","}"
"0",""
"0",""
"0","################################################################"
"0","# Creamos la función no_formato que nos devuelve todos los datos leidos en una"
"0","# lista tidy."
"0","no_formato<-function(directorio=dir(), extension="".asc$""){"
"0","  if(tail(unlist(strsplit(extension, split="""")),1)!=""$""){"
"0","    stop(""'extension' debe de terminar con el símbolo '$'."")"
"0","  }"
"0","# Leemos el nombre del fichero que nos interesa y guardamos a qué sujeto"
"0","# corresponde."
"0","  nombre<-as.matrix(grep(pattern=extension, x=dir(""./data"", full.names = TRUE),"
"0","  value=TRUE))"
"0","# Leemos cada uno de los ficheros línea a línea"
"0","  fichero<-apply(nombre,1,readLines)"
"0","  Sujeto<-apply(nombre, 1,FUN=function(x){unlist(strsplit(x, split=""_""))[2]})"
"0","# Llamamos a la fucnión lectura, creada abajo, que se encargará de crear el "
"0","# data.frame casi final."
"0","  ficheros_leidos<-lapply(fichero, lectura)"
"0","  names(ficheros_leidos)<-paste0(""fichero_"",(1:length(ficheros_leidos)))"
"0","  for (f in 1:length(fichero)){"
"0","    ficheros_leidos[[f]][[1]]<-ficheros_leidos[[f]][[1]]%>%mutate(""Sujeto""=Sujeto[f])"
"0","  }"
"0","  return(ficheros_leidos)"
"0","}"
"0",""
"0","#################################################################"
"0","# Creamos la función comprobacion para ver si SamplingFreq, Units y ChannelCount"
"0","# son iguales en todos los ficheros y devolvemos SamplingFreq, Units y ChannelCount"
"0","# (si no son iguales devolveremos un aviso pero continuaremos con la ejecución). "
"0","comprobacion<-function(list){"
"0","  n<-length(list)"
"0","  S<-numeric(n); U<-numeric(n); C<-numeric(n)"
"0","  for (j in 1:length(list)){"
"0","    S[j]<-list[[j]][[""SamplingFreq""]]"
"0","    U[j]<-list[[j]][[""Units""]]"
"0","    C[j]<-list[[j]][[""ChannelCount""]]"
"0","  }"
"0","  S<-unique(S)"
"0","  U<-unique(U)"
"0","  C<-unique(C)"
"0","  if (length(S)!=1){"
"0","    warning(""'SamplingFreq' se esperaba que fuese un único valor"")"
"0","  }"
"0","  if (length(U)!=1){"
"0","    warning(""'Units' se esperaba que fuese un único valor"")"
"0","  }"
"0","  if (length(C)!=1){"
"0","    warning(""'ChannelCount' se esperaba que fuese un único valor"")"
"0","  }"
"0","  return(list(""SamplingFreq""=S, ""Units""=U, ""ChannelCount""=C))"
"0","}"
